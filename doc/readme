1 - coordinates and adjacent cells
1.1 - coordinates are zero based: the very first point has (0,0) coordinates
1.2 - there are 6 adjacent cells: 2 up, 2 sides, 2 down

   0   1   2   3

0  --  ++  ++  --      x, x-1
1    ++  **  ++  --    x, x+1
2  --  ++  ++  --      x, x-1
3    --  --  --  --

     0   1   2   3

2 - sum of newly filled area:
2.1 -
- do first fill step
- create a copy (because of mutable plate) of plate
- do another fill step (on copy of plate)
- calc stat
2.2 -
- push cells with the same target color to separate list for
  counting of current color sum. It can go so:
  2.2.1 - way 1
  - first fill step pushes same target color cells in a list
  - first fill step finishes processing
  - plate saved
  - another fill step counting from the middle with that list
  - plate restored
  - result of second fill step is added to the result

  2.2.2 - way 2
  - fill step pushes same target color cells in a list
  - plate saved
  - another fill step runs with that list (on copy of plate)
  - plate restored
  - result of second fill step added to another counter

fill_step2(list):
for each i of list {
fill_step, starting from i. Compare colors and iter counters.
add stat
}

3
- check stat for next step color selection. Next step should be based on
  current statistic
- check several steps further (dynamic prog, minimax)
#- push to c_cnt both color counter and coordinates for later use in max finding

4
try domain approach:
- generate plate
- assign every group of cells (with the same color) to a domain
- for each domain prepare all necessary data:
  - list and amount of cells in domain
  - list and amount of adjacent domains and cells
  - ...
- do flood fill as with separate cells but instead of
individual cells use domains
